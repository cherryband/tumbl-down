# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Python Linter
      - run: |
       pip install pylint
       pylint --rcfile=.pylintrc *
        
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Python test
        uses: actions/setup-python@v4.0.0
        with:
          # Version range or exact version of Python to use, using SemVer's version range syntax. Reads from .python-version if unset.
          python-version: 3.9
          # Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry.
          cache: pip
        
        # The script does the following:
        # For files in /test directory (** means recursive) with .py extension, run python unittest.
        # sed command replaces every forward slash ('/') with a dot('.')("s/\//./g"),
        # and removes the .py extension ("s/\.py$//").
        # This makes the filename conform to the python package naming scheme,
        # and therefore understood by unittest module.
      - run: |
          python -V
          pip install -r requirements.txt
          for file in test/**.py;
            do python -m unittest "$(sed "{s/\//./g; s/\.py$//}" <<< "$file")";
          done
